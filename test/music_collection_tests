#!/usr/bin/env node

'use strict'

/**
 * Music Collection Test Suite
 * The following test suite will verify core functionality of the MusicCollection class
 */

const MusicCollection = require('../lib/collection.js')
let mc = new MusicCollection()
let testCount = 1

console.log("\nRunning Test Suite for Music Collection\n")

function displayTestMessage(message) {
  console.log(`TEST ${testCount}: ${message}`)
  testCount++
}

function displayResult(pass, errorMessage) {

  if ( errorMessage ) {
    console.log("OUTPUT:", errorMessage)
  }

  console.log("RESULT:", pass ? 'PASS' : 'FAIL')

  console.log()
}

displayTestMessage('Add an album to the collection')
try {
  const albumTitle = "Licensed to Ill"
  const artistName = "Beastie Boys"
  mc.addAlbum(albumTitle, artistName)
  displayResult(true)
}
catch (error) {
  displayResult(false, error)
}

displayTestMessage('Add another album to the collection by the same artist')
try {
  const artistName = "Beastie Boys"
  const albumTitle = "Pauls Boutique"
  mc.addAlbum(albumTitle, artistName)
  displayResult(true)
}
catch (error) {
  displayResult(false, error)
}

displayTestMessage('Add another album to the collection with a different artist')
try {
  const artistName = "Pink Floyd"
  const albumTitle = "The Dark Side of the Moon"
  mc.addAlbum(albumTitle, artistName)
  displayResult(true)
}
catch (error) {
  displayResult(false, error)
}

displayTestMessage('Try to add an album without a title')
try {
  const artistName = "Pink Floyd"
  const albumTitle = ""
  mc.addAlbum(albumTitle, artistName)
  displayResult(false)
}
catch (error) {
  displayResult(true, error)
}

displayTestMessage('Try to add an album without an artist')
try {
  const artistName = ""
  const albumTitle = "The Wall"
  mc.addAlbum(albumTitle, artistName)
  displayResult(false)
}
catch (error) {
  displayResult(true, error)
}

displayTestMessage('Try to add a duplicate album (different artist)')
try {
  const albumTitle = "Licensed to Ill"
  const artistName = "Beasties"
  mc.addAlbum(albumTitle, artistName)
  displayResult(false)
}
catch (error) {
  displayResult(true, error)
}

displayTestMessage('Play an album')
try {
  const albumTitle = "Licensed to Ill"
  mc.playAlbum(albumTitle)
  displayResult(true)
}
catch (error) {
  displayResult(false, error)
}

displayTestMessage('Attempt to play an album that does not exist in the collection')
try {
  const albumTitle = "Invalid Title"
  mc.playAlbum(albumTitle)
  displayResult(false)
}
catch (error) {
  displayResult(true, error)
}

displayTestMessage('Get all of the albums in the collection')
try {
  const collection = mc.getAllAlbums()

  if ( collection.length == 3 ) {
    displayResult(true)
  }
  else {
    displayResult(false, `Collection has a length of ${collection.length} | Expected result is 3`)
  }
}
catch (error) {
  displayResult(false, error)
}

displayTestMessage('Get the albums in the collection by an artist')
try {
  const artist = "Beastie Boys"
  const collection = mc.getAllAlbums(artist)

  if ( collection.length == 2 ) {
    displayResult(true)
  }
  else {
    displayResult(false, `Collection has a length of ${collection.length} for artist: "${artist}" | Expected result is 2`)
  }
}
catch (error) {
  displayResult(false, error)
}

displayTestMessage('Get all of the albums in the collection that are unplayed')
try {
  const collection = mc.getAllUnplayed()

  if ( collection.length == 2 ) {
    displayResult(true)
  }
  else {
    displayResult(false, `Collection has a length of ${collection.length} | Expected result is 2`)
  }
}
catch (error) {
  displayResult(false, error)
}

displayTestMessage('Get all of the albums in the collection that are unplayed by artist')
try {
  const collection = mc.getAllUnplayedByArtist("Beastie Boys")

  if ( collection.length == 1 ) {
    displayResult(true)
  }
  else {
    displayResult(false, `Collection has a length of ${collection.length} | Expected result is 1`)
  }
}
catch (error) {
  displayResult(false, error)
}

displayTestMessage('Attempt to get a list of albums in the collection that are unplayed by an invalid artist')
try {
  const collection = mc.getAllUnplayedByArtist("Invalid Artist")

  if ( collection.length == 0 ) {
    displayResult(true)
  }
  else {
    displayResult(false, `Collection has a length of ${collection.length} | Expected result is 0`)
  }
}
catch (error) {
  displayResult(false, error)
}


displayTestMessage('Remove an album from the collection')
try {
  const albumTitle = "Pauls Boutique"
  mc.removeAlbum(albumTitle)

  const collection = mc.getAllAlbums()

  if ( collection.length == 2 ) {
    displayResult(true)
  }
  else {
    displayResult(false, `Collection has a length of ${collection.length} | Expected result is 2`)
  }
}
catch (error) {
  displayResult(false, error)
}
